//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Commands Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Ecs.Commands.Generator;
using Ecs.Signal.Commands;
using Db.GameObjectsBase.Impl;
using UnityEngine;
using Ecs.Action.Commands.CreateUnitsFraction;
using Ecs.Action.Commands.Fraction;
using Ecs.Action.Commands.Input;
using JCMG.EntitasRedux.Commands;


namespace Generated.Commands
{
    public static partial class CommandBufferExtensions
    {

        public static void SignalStart(this ICommandBuffer commandBuffer)
        {
            ref var command = ref commandBuffer.Create<SignalStartCommand>();
        }

        public static void CreateUnitsFraction(this ICommandBuffer commandBuffer, int unitsCount, EFractionType fractionType, Vector3 fractionBasePosition)
        {
            ref var command = ref commandBuffer.Create<CreateUnitsFractionCommand>();
            command.UnitsCount = unitsCount;
            command.FractionType = fractionType;
            command.FractionBasePosition = fractionBasePosition;
        }

        public static void CreditFactionResources(this ICommandBuffer commandBuffer, GameEntity fraction, EGameResourceType resourceType, int amaunt)
        {
            ref var command = ref commandBuffer.Create<CreditFactionResourcesCommand>();
            command.Fraction = fraction;
            command.ResourceType = resourceType;
            command.Amaunt = amaunt;
        }

        public static void PointerDown(this ICommandBuffer commandBuffer, Vector3 position)
        {
            ref var command = ref commandBuffer.Create<PointerDownCommand>();
            command.Position = position;
        }

        public static void PointerMove(this ICommandBuffer commandBuffer, Vector3 position)
        {
            ref var command = ref commandBuffer.Create<PointerMoveCommand>();
            command.Position = position;
        }

        public static void PointerUp(this ICommandBuffer commandBuffer)
        {
            ref var command = ref commandBuffer.Create<PointerUpCommand>();
        }

    }
}
