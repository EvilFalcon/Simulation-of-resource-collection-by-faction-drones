//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public CountListenerComponent CountListener { get { return (CountListenerComponent)GetComponent(GameComponentsLookup.CountListener); } }
	public bool HasCountListener { get { return HasComponent(GameComponentsLookup.CountListener); } }

	public void AddCountListener()
	{
		var index = GameComponentsLookup.CountListener;
		var component = (CountListenerComponent)CreateComponent(index, typeof(CountListenerComponent));
		AddComponent(index, component);
	}

	public void ReplaceCountListener()
	{
		ReplaceComponent(GameComponentsLookup.CountListener, CountListener);
	}

	public void RemoveCountListener()
	{
		RemoveComponent(GameComponentsLookup.CountListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherCountListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> CountListener
	{
		get
		{
			if (_matcherCountListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.CountListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherCountListener = matcher;
			}

			return _matcherCountListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public System.IDisposable SubscribeCount(OnGameCount value, bool invokeOnSubscribe = true)
	{
		var componentListener = HasCountListener
			? CountListener
			: (CountListenerComponent)CreateComponent(GameComponentsLookup.CountListener, typeof(CountListenerComponent));
		componentListener.Delegate += value;
		ReplaceComponent(GameComponentsLookup.CountListener, componentListener);
		if(invokeOnSubscribe && HasComponent(GameComponentsLookup.Count))
		{
			var component = Count;
			value(this, component.Value);
		}

		return new JCMG.EntitasRedux.Events.EventDisposable<OnGameCount>(CreationIndex, value, UnsubscribeCount);
	}

	private void UnsubscribeCount(int creationIndex, OnGameCount value)
	{
		if(!IsEnabled || CreationIndex != creationIndex)
			return;

		var index = GameComponentsLookup.CountListener;
		var component = CountListener;
		component.Delegate -= value;
		if (CountListener.IsEmpty)
		{
			RemoveComponent(index);
		}
		else
		{
			ReplaceComponent(index, component);
		}
	}
}
